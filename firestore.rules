rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create a profile with id: 'user123'.
     * @deny (create) User with UID 'user123' cannot create a profile with id: 'user456'.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) User with UID 'user123' cannot read, update, or delete another user's profile.
     * @principle Enforces user-ownership for profile data, ensuring only the user can manage their profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules for meals within a user's profile.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create) User with UID 'user123' can create a meal under their profile.
     * @deny (create) User with UID 'user123' cannot create a meal under another user's profile.
     * @allow (get, list, update, delete) User with UID 'user123' can read, list, update, and delete their own meals.
     * @deny (get, list, update, delete) User with UID 'user123' cannot read, list, update, or delete another user's meals.
     * @principle Enforces user-ownership for meal data, ensuring only the user can manage their meals.
     */
    match /users/{userId}/meals/{mealId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules for food items within a meal.
     * @path /users/{userId}/meals/{mealId}/foodItems/{foodItemId}
     * @allow (create) User with UID 'user123' can create a food item under their meal.
     * @deny (create) User with UID 'user123' cannot create a food item under another user's meal.
     * @allow (get, list, update, delete) User with UID 'user123' can read, list, update, and delete their own food items.
     * @deny (get, list, update, delete) User with UID 'user123' cannot read, list, update, or delete another user's food items.
     * @principle Enforces user-ownership for food item data, ensuring only the user can manage food items within their meals.
     */
    match /users/{userId}/meals/{mealId}/foodItems/{foodItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules for weight measurements within a user's profile.
     * @path /users/{userId}/weightMeasurements/{weightMeasurementId}
     * @allow (create) User with UID 'user123' can create a weight measurement under their profile.
     * @deny (create) User with UID 'user123' cannot create a weight measurement under another user's profile.
     * @allow (get, list, update, delete) User with UID 'user123' can read, list, update, and delete their own weight measurements.
     * @deny (get, list, update, delete) User with UID 'user123' cannot read, list, update, or delete another user's weight measurements.
     * @principle Enforces user-ownership for weight measurement data, ensuring only the user can manage their weight measurements.
     */
    match /users/{userId}/weightMeasurements/{weightMeasurementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules for global achievements.
     * @path /achievements/{achievementId}
     * @allow (get, list) Any user can read the achievements.
     * @deny (create, update, delete) No one can create, update, or delete achievements (admin only - not yet implemented).
     * @principle Allows public read access to achievements while restricting write access.
     */
    match /achievements/{achievementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for user achievements within a user's profile.
     * @path /users/{userId}/userAchievements/{userAchievementId}
     * @allow (create) User with UID 'user123' can create a user achievement under their profile.
     * @deny (create) User with UID 'user123' cannot create a user achievement under another user's profile.
     * @allow (get, list, update, delete) User with UID 'user123' can read, list, update, and delete their own user achievements.
     * @deny (get, list, update, delete) User with UID 'user123' cannot read, list, update, or delete another user's user achievements.
     * @principle Enforces user-ownership for user achievement data, ensuring only the user can manage their earned achievements.
     */
    match /users/{userId}/userAchievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}