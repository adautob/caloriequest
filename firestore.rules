/**
 * @file Firestore Security Rules for CalorieQuest.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles, meals, weight measurements, and user achievements.
 *   Global achievements are publicly readable.
 * @data_structure All user-specific data is nested under /users/{userId}, ensuring data isolation.
 * @key_security_decisions
 *   - Users can only access their own profile and associated data.
 *   - Global achievements are publicly readable but not writable by regular users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching UID.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own profile.
     * @deny (create, get, update, delete) - Any other user attempts to access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to meal logs for a specific user.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create) - Authenticated user creates a meal log under their own user ID.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own meal log.
     * @deny (create, get, update, delete) - Any other user attempts to access this meal log.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/meals/{mealId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to food items within a user's meal log.
     * @path /users/{userId}/meals/{mealId}/foodItems/{foodItemId}
     * @allow (create) - Authenticated user creates a food item under their own user ID and meal ID.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own food item.
     * @deny (create, get, update, delete) - Any other user attempts to access this food item.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/meals/{mealId}/foodItems/{foodItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to weight measurements for a specific user.
     * @path /users/{userId}/weightMeasurements/{weightMeasurementId}
     * @allow (create) - Authenticated user creates a weight measurement under their own user ID.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own weight measurement.
     * @deny (create, get, update, delete) - Any other user attempts to access this weight measurement.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/weightMeasurements/{weightMeasurementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Public read access to global achievement definitions, write access is denied.
     * @path /achievements/{achievementId}
     * @allow (get, list) - Any user can read achievement definitions.
     * @deny (create, update, delete) - No user can create, update, or delete achievements (assumed admin-only).
     * @principle Allows public read access while restricting write access.
     */
    match /achievements/{achievementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure access to user achievements for a specific user.
     * @path /users/{userId}/userAchievements/{userAchievementId}
     * @allow (create) - Authenticated user creates a user achievement under their own user ID.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own user achievement.
     * @deny (create, get, update, delete) - Any other user attempts to access this user achievement.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userAchievements/{userAchievementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}