rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document, based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document and it exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get) - User with matching UID can get their profile.
     * @allow (update) - User with matching UID can update their profile.
     * @allow (delete) - User with matching UID can delete their profile.
     * @deny (create) - User attempts to create a profile with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for meals.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create) - User with matching UID can create a meal.
     * @allow (get) - User with matching UID can get a meal.
     * @allow (update) - User with matching UID can update their meal.
     * @allow (delete) - User with matching UID can delete their meal.
     * @deny (create) - User attempts to create a meal with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/meals/{mealId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for food items.
     * @path /users/{userId}/meals/{mealId}/foodItems/{foodItemId}
     * @allow (create) - User with matching UID can create a food item.
     * @allow (get) - User with matching UID can get a food item.
     * @allow (update) - User with matching UID can update their food item.
     * @allow (delete) - User with matching UID can delete their food item.
     * @deny (create) - User attempts to create a food item with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/meals/{mealId}/foodItems/{foodItemId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for weight measurements.
     * @path /users/{userId}/weightMeasurements/{weightMeasurementId}
     * @allow (create) - User with matching UID can create a weight measurement.
     * @allow (get) - User with matching UID can get a weight measurement.
     * @allow (update) - User with matching UID can update their weight measurement.
     * @allow (delete) - User with matching UID can delete their weight measurement.
     * @deny (create) - User attempts to create a weight measurement with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/weightMeasurements/{weightMeasurementId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for achievements.
     * @path /achievements/{achievementId}
     * @allow (get) - Any user can get an achievement.
     * @allow (list) - Any user can list achievements.
     * @deny (create) - No one can create achievements (yet).
     * @deny (update) - No one can update achievements (yet).
     * @deny (delete) - No one can delete achievements (yet).
     * @principle Public read, admin-only write (currently disabled for prototyping).
     */
    match /achievements/{achievementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Restrict to admins.
      allow update: if false; // TODO: Restrict to admins.
      allow delete: if false; // TODO: Restrict to admins.
    }

    /**
     * @description Rules for user achievements.
     * @path /users/{userId}/userAchievements/{userAchievementId}
     * @allow (create) - User with matching UID can create a user achievement.
     * @allow (get) - User with matching UID can get a user achievement.
     * @allow (update) - User with matching UID can update their user achievement.
     * @allow (delete) - User with matching UID can delete their user achievement.
     * @deny (create) - User attempts to create a user achievement with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userAchievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}